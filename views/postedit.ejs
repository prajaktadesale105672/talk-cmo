<%- include('head') %>
    <link rel="stylesheet" href="/assets/flatpickr/flatpickr.min.css">
    </head>

    <body>

        <%- include('appHeader') %>
            <div class="wrapper d-flex align-items-stretch">
                <%- include('sidebar') %>

                    <!-- Page Content  -->
                    <div id="content" class="">
                        <div class="content_wrapper">
                            <% if (typeof postData !=='undefined' && postData !==null) { %>
                                <form id="udpatePost">
                                    <div class="container app_container">
                                        <div class="row">
                                            <div class="col-sm-6">
                                                <h2 class="mb-4">Edit Post</h2>
                                            </div>
                                            <div class="col-sm-6 text-sm-end">
                                                <button type="submit" class="btn btn-sm btn-primary submitBtn px-4">
                                                    <% if(postData.post_status == 'publish') {%>
                                                        Publish
                                                    <%}else{%>
                                                        Draft
                                                    <%}%>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div id="timeoutMessage" style="display: none; color: red;">
                                                You have been inactive. Press any key to continue.
                                            </div>
                                            <input type="hidden" id="session_user" name="session_user"
                                                value="<%= user.userid %>">
                                            <input type="hidden" id="post_id" name="post_id" value="<%= postData.id %>">
                                            <div class="col-md-8">
                                                <div class="mb-2">

                                                    <label for="p_title" class="form-label">Post Title<span
                                                            class="text-danger">*</span></label>
                                                    <input type="text" class="form-control form-control-sm" id="p_title"
                                                        name="p_title" required value="<%= postData.post_title %>"
                                                        data-parsley-required-message="Post Title is required">
                                                </div>
                                                <div class="mb-2">
                                                    <label for="p_slug" class="form-label">Post Slug Name<span
                                                            class="text-danger">*</span></label>
                                                    <input type="text" class="form-control form-control-sm" id="p_slug"
                                                        name="p_slug" value="<%= postData.post_name %>" required
                                                        data-parsley-pattern="^(?!^[0-9]+$)(?!^[^a-z0-9]+$)[a-z0-9]+(?:-[a-z0-9]+)*$"
                                                        data-parsley-pattern-message="Post slug should be in lowercase letters and contain dashes between words. Avoid using spaces, uppercase letters, numbers, or special characters.">


                                                </div>
                                                <% const formattedDate=(postData.post_date && postData.post_date !==null
                                                    && !isNaN(Date.parse(postData.post_date))) ? new
                                                    Date(postData.post_date).toISOString() : "" ; %>
                                                    <div class="mb-2">
                                                        <div class="d-flex justify-content-between">
                                                            <label for="publish_date" class="form-label">Publish
                                                                Date<span
                                                                class="text-danger">*</span>
                                                            </label>
                                                            <div class="form-check form-switch">
                                                                <input class="form-check-input" type="checkbox" role="switch" id="auto_publish" 
                                                                <%= (postData.auto_publish) ? "checked" : ""%>>
                                                                <label class="form-check-label" for="auto_publish">Auto Publish</label>
                                                            </div>
                                                        </div>
                                                        <input class="form-control form-control-sm" id="publish_date"
                                                            value="<%= formattedDate %>"
                                                            placeholder="Select Publish Date" required>
                                                            
                                                    </div>

                                                    <div class="row mb-2">
                                                        <div class="col-md-6 ">
                                                            <label for="category" class="form-label">Category </label>
                                                            <select class="form-select form-select-sm "
                                                                style="width: 100%" id="category" name="category"
                                                                aria-label="Small select example">
                                                                <option value="" selected disabled>Select Category
                                                                </option>
                                                                <% catData.forEach(function(cat){ %>
                                                                    <option value="<%= cat.cat_id %>"
                                                                        <%=postData.cat_id==cat.cat_id ? "selected" : ""
                                                                        %> ><%= cat.cat_name %>
                                                                    </option>
                                                                    <% }) %>

                                                            </select>

                                                        </div>
                                                        <div class="col-md-6 ">
                                                            <label for="subCategory"
                                                                class="form-label">Sub-Category</label>
                                                            <select class="form-select form-select-sm " id="subCategory"
                                                                name="subCategory" aria-label="Small select example">
                                                                <option value="" selected disabled>Select Sub-Category
                                                                </option>
                                                                <% subCatData.forEach(function(subCat){ %>
                                                                    <option value="<%= subCat.subcat_id %>"
                                                                        <%=postData.subcat_id==subCat.subcat_id
                                                                        ? "selected" : "" %> ><%= subCat.subcat_name %>
                                                                    </option>
                                                                    <% }) %>
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <div class="mb-2">
                                                        <label for="author" class="form-label">Author</label>

                                                        <select class="form-select form-select-sm " id="author"
                                                            name="author" aria-label="Small select example">
                                                            <option value="" selected disabled>Select Author</option>
                                                            <% authorData.forEach(function(author){ %>
                                                                <option value="<%= author.author_id%>"
                                                                    <%=postData.post_author_id==author.author_id
                                                                    ? "selected" : "" %>><%=
                                                                        author.author_display_name%>
                                                                </option>
                                                                <%}) %>
                                                        </select>
                                                    </div>


                                            </div>

                                            <div class="col-md-4">
                                                <div class="text-center banner_wrapper mb-2">
                                                    <img id="banner_img_preview" class="preview_img"
                                                        src="<%= postData.banner_img ? etVar + postData.banner_img : '../images/blank-image.svg' %>"
                                                        alt="Image Preview">
                                                </div>
                                                <div class="mb-2">
                                                    <div class="d-flex justify-content-between">
                                                        <label for="banner_img" class="form-label">Banner Image</label>
                                                        <div class="form-check form-switch">
                                                            <input class="form-check-input" type="checkbox" role="switch" id="banner_show" 
                                                            <%= (postData.banner_show) ? "checked" : ""%>>
                                                            <label class="form-check-label" for="banner_show">Show</label>
                                                        </div>
                                                    </div>
                                                    <input class="form-control form-control-sm" id="banner_img"
                                                        type="file" value="<%= postData.banner_img %>">
                                                </div>



                                            </div>

                                            <div class="col-12 mb-2">
                                                <label for="podcast_link" class="form-label">
                                                    Podcast Link
                                                </label>
                                                <input type="text" class="form-control form-control-sm"
                                                    id="podcast_link" name="text" value="<%= postData.podcast_link %>">
                                            </div>

                                            <div class="col-12">
                                            
                                                <div class="d-flex justify-content-between">
                                                    <div>
                                                        <label for="p_desc" class="form-label">Post Description</label>
                                                    </div>
                                                    <div class="my-1">
                                                        <button class="btn btn-sm btn-dark" data-bs-toggle="modal" data-bs-target="#postDescLog">
                                                            <i class="bi bi-chevron-double-left"></i> Track Changes
                                                        </button>
                                            
                                                    </div>
                                            
                                                   
                                                </div>
                                                <textarea id="p_desc"><%= postData.post_content %></textarea>
                                            </div>
                                          

                                            <!-- <p id="login-status"></p> -->

                                        </div>





                                    </div>
                                    <div class="container app_container mt-3">
                                        <div class="row ">
                                            <h4>SEO</h4>
                                            <div class="col-12 mb-2">
                                                <label for="meta_title" class="form-label">
                                                    Meta Title<span class="text-danger">*</span>
                                                </label>
                                                <input type="text" class="form-control form-control-sm" id="meta_title"
                                                    name="meta_title" value="<%= postData.meta_title %>" required
                                                    data-parsley-required-message="Meta Title is required">
                                            </div>
                                            <div class="col-12 mb-2">
                                                <label for="meta_description" class="form-label">
                                                    Meta Description<span class="text-danger">*</span>
                                                </label>
                                                <input type="text" class="form-control form-control-sm"
                                                    id="meta_description" name="text"
                                                    value="<%= postData.meta_description %>" required
                                                    data-parsley-required-message="Meta Description is required">
                                            </div>
                                            <div class="col-md-8 mb-2">
                                                <label for="meta_keywords" class="form-label">
                                                    Meta Keywords<span class="text-danger">*</span>
                                                </label>
                                                <input type="text" class="form-control form-control-sm"
                                                    id="meta_keywords" name="text" value="<%= postData.meta_keywords %>"
                                                    required data-parsley-required-message="Meta Keywords is required">
                                            </div>
                                            <div class="col-md-4 mb-2">
                                                <label for="read_time" class="form-label">Reading Time (in Min)</label>
                                                <input type="text" class="form-control form-control-sm"
                                                    id="read_time" name="text" value="<%= postData.reading_time %>">
                                            </div>
                                        </div>
                                    </div>

                                    <div class="container app_container mt-3">
                                        <div class="row comment_box">
                                            <h4>Comment</h4>
                                            <p><%- postData.comments.split("<br>").at(-2) %></p>
                                            <div class="col-md-4 mb-2">
                                                <label for="handover_to" class="form-label">Assign To</label>
                                                <select class="form-select form-select-sm " id="handover_to"
                                                    name="handover_to" aria-label="Small select example"
                                                    <%= (postData.post_status == 'publish') ? "disabled" : ""%>
                                                    >
                                                    <option value="" selected>Select User</option>
                                                    <% handoverData.forEach(function(handover){ if(handover.h_user_id
                                                        !=user.userid){ %>
                                                        <option value="<%= handover.h_user_id%>">
                                                            <%= handover.h_user_name%> - <%= handover.h_role_name%>
                                                        </option>
                                                        <% }})%>
                                                </select>
                                                <% if(postData.post_status == 'publish') {%>
                                                   <p class="errorMsg py-1">Note: This Post is already Published. To Assign user, change status to Draft </p>
                                                <%}%>
                                            </div>
                                            <div class="col-md-8 mb-3">
                                                <label for="comments" class="form-label">Comment<span
                                                        class="text-danger">*</span></label>
                                                <input type="text" class="form-control form-control-sm"
                                                    id="comments" name="text" required
                                                    data-parsley-required-message="Comment is required">
                                            </div>
                                            <div class="col-12 mt-3 mb-3 btn_wrapper text-end">
                                            
                                                <% if (postData.post_status == 'publish') { %>
                                                   <button class="btn me-2 btn-warning" <%= (postData.cat_slug && postData.post_name) ? '' : 'disabled' %>> <a  href="<%= etVar %>/<%= postData.cat_slug %>/<%= postData.post_name %>" target="_blank">Preview</a></button>
                                                <% } else { %>
                                                    <button class="btn me-2 btn-warning" <%= (postData.cat_slug && postData.post_name) ? '' : 'disabled' %>> <a  href="<%= etVar %>/preview/<%= postData.cat_slug %>/<%= postData.post_name %>" target="_blank">Preview</a></button>
                                                <% } %>
                                                
                                                       

                                                <button type="submit" class="btn submitBtn btn-primary px-4">
                                                    <% if(postData.post_status == 'publish') {%>
                                                        Publish
                                                    <%}else{%>
                                                        Draft
                                                    <%}%>
                                                </button>

                                                <% if(!postData.cat_slug || !postData.post_name) {%>
                                                    <p class="errorMsg py-1">Note: Preview not awailable as Post Name or Category is not set. </p>
                                                 <%}%>

                                            </div>
                                        </div>
                                    </div>
                                </form>
                                <% } else { %>
                                    <!-- Variable is not set -->
                                    <div class="center_box">
                                        <h5 class=" text-danger">
                                            <%= error%>
                                        </h5>
                                        <a href="<%=rootVar%>/postall" class="btn btn-sm btn-primary ">View
                                            Posts</a>
                                    </div>
                                    <% } %>
                        </div>

                    </div>
            </div>
            <!-- Modal -->
    <div class="modal fade" id="postDescLog" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="postDescLog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 800px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="postDescLog">Post Description History</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addCategory">
                    <div class="modal-body">
                        <label for="descHistory" class="form-label">Select History</label>
                        <select class="form-select form-select-sm mb-3 " id="descHistory"
                        name="descHistory" aria-label="Small select example">
                        <option value="" selected disabled>Select History</option>

                        <% descHistory.forEach(function(phisotry){ %>
                            <option value="<%= phisotry.id %>">
                                <%= phisotry.display_name %> - <%= new Date(phisotry.created_at).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }) %>
                            </option>
                            <% }) %>


                       


                       
                        </select>
                        <textarea id="postDesc" readonly rows="10" disabled></textarea>
    
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Close</button>
                     
                    </div>
                </form>
            </div>
        </div>
    </div>

            <%- include('contentFooter') %>

            
            <script src="https://code.jquery.com/jquery-migrate-1.0.0.js"></script>
                <script src="/assets/flatpickr/flatpickr.js"></script>
                <script  type="text/javascript" src="/assets/js/ice/ice-master.min.js"></script>
                <script type="text/javascript"  src="/assets/js/ice/lib/tinymce/js/tinymce/tinymce.js" referrerpolicy="origin"></script>
             
                
                

                <script>
                   

                   tinymce.init({
                      selector: 'textarea#postDesc',
                      elements: "tinymce",
                      mode: "none",
                      toolbar: "",
                      readonly: true,
                      plugins: 'searchreplace ice icesearchreplace ice,icesearchreplace',
                      editor_deselector: "readonly",
                      noneditable_noneditable_class: "mceNonEditable",
                      noneditable_class: 'uneditable',
                      editor_deselector: "readonly",
                      toolbar: false, // Hide the toolbar
                        menubar: false, // Hide the menubar
                        statusbar: false, // Hide the statusbar
                      extended_valid_elements: "p,span[*],delete[*],insert[*]",
                    //   plugins: 'searchreplace ice icesearchreplace ice,icesearchreplace',
                    content_css: "<%=rootVar%>/assets/js/ice/demo.css",
                    height:'450',
                   
                    
                    
                    });

                    tinymce.init({
                        selector: 'textarea#p_desc',
                        mode: "exact",
                        elements: "tinymce",
                        readonly: false,
                        plugins: 'searchreplace ice icesearchreplace ice,icesearchreplace, print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',
                        toolbar1: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',
                        toolbar2: "ice_togglechanges | ice_toggleshowchanges | iceacceptall icerejectall | iceaccept icereject",
                        extended_valid_elements: "p,span[*],delete[*],insert[*]",
                        quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
                        noneditable_noneditable_class: "mceNonEditable",
                        toolbar_mode: 'sliding',
                        contextmenu: "link image imagetools table",
                        content_css: "<%=rootVar%>/assets/js/ice/demo.css",
                        setup: function (editor) {
                            // Attach onKeyUp event listener to the editor
                            editor.on('KeyUp', function (event) {
                                var content = editor.getContent();
                                descChangeFlag = 1;
                                // Check for Chinese characters using a regular expression
                                var regex = /[\u4E00-\u9FFF\u3400-\u4DBF！，。？【】《》：；“”‘’「」『』—–－％＃＠＆＊＋－＝￥｜～｀〈〉〔〕〖〗〘〙〚〛〝〞〟〰〾〿–—‘’‛“”„‟․‧‰‱‼⁇⁈⁉︰﹐﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦﹨﹩﹪﹫ﹰﹱﹲﹴ﹵ﹶﹷﹸﹹﹺﹻﹼﹽﹾﹿ＿－（）]/;
                                if (regex.test(content)) {
                                    alert('Editor contains Chinese characters.');
                                    // Additional actions when Chinese characters are found
                                } else {
                                    console.log('Editor content does not contain Chinese characters.');
                                    // Additional actions when no Chinese characters are found
                                }
                                
                            });
                        },
                        ice: {
                            user: { name: '<%= user.user_name %>', id: '<%= user.userid %>'},
                            preserveOnPaste: 'p,a[href],i,em,b,span',
                            deleteTag: 'delete',
                            insertTag: 'insert'
                        },
                        height: '500'
                    });
		
                   
		


                  
                </script>

                <% if (typeof postData !=='undefined' && postData !==null) { %>
                    <script>



                        $(document).ready(function () {
                            // flag to check if post description is changed or not
                            descChangeFlag = 0;


                            $('#descHistory').change(async function(){
                            // Log the changed value
                            var descHistoryId = $(this).val();
                            try {
                                const response = await fetch(`<%=rootVar%>/api/post/post-desc-history/${descHistoryId}`).then(response => {
                                if (!response.ok) {
                                    throw new error(`Post description data not received`);
                                }
                                return response.json();
                                }).then(data => {
                                    const postDesc = data.postDesc[0];
                                    var editor = tinymce.get('postDesc');
                                    editor.setContent(postDesc.post_content)
                                    editor.getBody().setAttribute('contenteditable', 'false');
                                    editor.getBody().setAttribute('aria-readonly', 'true');
                                    editor.getBody().setAttribute('tabindex', '-1');
                                
                                })
                            } catch (error) {
                                Swal.fire({
                                text: `Post description data Error!`,
                                icon: "error",
                                });
                                // console.log(error);
                            }
                            });




                            $("#publish_date").flatpickr({ 
                                enableTime: true,
                                dateFormat: "Y-m-d H:i",
                          
                             });
                            const imgSrc = $(".preview_img").attr('src');
                            const blankImg = imgSrc.indexOf('blank-image.svg') === -1;


                            const startTime = getDateTime();

                            $('input[name="p_title"]').on('input change', function () {
                                // Get the value of the input field
                                var name = $(this).val();

                                // Replace spaces and slashes with hyphens and convert to lowercase
                                var subName = name.toLowerCase().replace(/[\s/]+/g, '-');

                                // Use setTimeout to introduce a delay for autofill processing
                                setTimeout(function () {
                                    // Update the value of the slug input field
                                    $('#p_slug').val(subName);
                                }, 100);
                            });



                            // setInterval(() => {
                            //         console.log('Auto-Save initiated');
                            //         autoSavePost() ;
                            // }, 60000);

                            const postCat = '<%= postData.cat_id %>';
                            const postSubCat = '<%= postData.subcat_id %>';
                            const timeStamp = new Date().toLocaleString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true });

                            $("#handover_to").change(function (e) {
                                $(".submitBtn").html($(this).val() ? 'Handover' : 'Draft');
                            });

                            $("#banner_img").change(function () {

                                var input = this;
                                if (input.files && input.files[0]) {

                                    $('#banner_img_preview').attr('src', URL.createObjectURL(input.files[0]));
                                }
                            });

                            $('#udpatePost').parsley();


                           


                            async function updatePost() {
                                console.log('update post');
                                const endTime = getDateTime();
                                const selectedOption = $('#handover_to option:selected');
                                const comment = $("#comments").val();
                                // console.log(' handover val ' +$("#handover_to").val());
                                const handoverName = $("#handover_to").val() ? `<b> Handover To - ${selectedOption.text()}</b>` : '';


                        

                                const post_id = $("#post_id").val();
                                const session_user = $("#session_user").val();
                                const p_title = $("#p_title").val();
                                const p_slug = $("#p_slug").val();
                                const publish_date = $("#publish_date").val();
                                const category = $("#category").val() || 0;
                                const subCategory = $("#subCategory").val() || 0;
                                const author = $("#author").val() || 0;
                                const post_desc = tinymce.get("p_desc").getContent();
                                const meta_title = $("#meta_title").val();
                                const meta_description = $("#meta_description").val();
                                const meta_keywords = $("#meta_keywords").val();
                                const read_time = $("#read_time").val() || 1;
                                const handover_to = $("#handover_to").val() ? $("#handover_to").val() : 0;
                                const comments = `<%- postData.comments %><b>By <%= user.user_name %> ${timeStamp}</b> : ${comment} ${handoverName}<br> `;
                                const podcast_link = $("#podcast_link").val();
                           
                                // console.log({comments});
                                const formData = new FormData();
                                formData.append('post_id', post_id);
                                formData.append('session_user', session_user);
                                formData.append('post_title', p_title);
                                formData.append('post_name', p_slug);
                                formData.append('post_date', publish_date);
                                formData.append('cat_id', category);
                                formData.append('subcat_id', subCategory);
                                formData.append('post_author', author);
                                formData.append('post_content', post_desc);
                                formData.append('meta_title', meta_title);
                                formData.append('meta_description', meta_description);
                                formData.append('meta_keywords', meta_keywords);
                                formData.append('reading_time', read_time);
                                formData.append('handover_to', handover_to);
                                formData.append('comments', comments);
                                formData.append('startTime', startTime);
                                formData.append('endTime', endTime);
                                formData.append('descChange', descChangeFlag);
                                formData.append('auto_publish', $("#auto_publish").prop("checked") ? 1 : 0);
                                formData.append('banner_show', $("#banner_show").prop("checked") ? 1 : 0);
                                formData.append('podcast_link', podcast_link);

                                const imageInput = $('#banner_img')[0]; // Note: [0] to access the native DOM element

                                if (imageInput.files[0]) {
                                    formData.append('banner_img', imageInput.files[0]);
                                }

                                console.log({ formData });

                                
                           

                                try {
                                    const response = await fetch("<%=rootVar%>/api/post", {
                                        method: "PUT",
                                        body: (formData),
                                    });



                                    if (response.ok) {
                                        Swal.fire({
                                            text: "Post Details Updated!",
                                            icon: "success",
                                            showCancelButton: false,
                                            confirmButtonText: 'OK',
                                            // timer: 2000
                                        }).then((result) => {
                                            if (result.isConfirmed || result.dismiss === Swal.DismissReason.backdrop || result.dismiss === Swal.DismissReason.esc) {
                                                if ($("#handover_to").val()) {
                                                    window.location.replace('<%=rootVar%>/handover');
                                                } else {
                                                    window.location.reload();
                                                }
                                            }
                                        })
                                        // console.log(response);
                                        // // Successful login
                                        // const responseData = await response.json();
                                        // document.getElementById("login-status").textContent = "Login successful. Welcome, " + responseData.autToken;
                                    } else {
                                        const errorData = await response.json();
                                        // console.log('the error '+ errorData.message);
                                        throw new Error(errorData.message);
                                        // Swal.fire({
                                        //     text: "Post update error!",
                                        //     icon: "error",

                                        //     // timer: 2000
                                        // })


                                    }
                                } catch (error) {
                                    // console.log('catch error '+error);
                                    Swal.fire({
                                        text: error.message,
                                        icon: "error",

                                        // timer: 2000
                                    })
                                    // Handle network errors

                                }
                            }

                            $('#udpatePost').submit(async function (e) {
                                e.preventDefault();
                                console.log('fomr submit');
                                
                               
                               
                                // console.log(`${selectedOption.text()}`);

                                // This event handler is triggered after Parsley.js validation is complete.
                                // console.log('form submit');
                                // Check if the form is valid
                                if ($(this).parsley().isValid()) {
                                    console.log('form valid');


                                    const imageInput = $('#banner_img')[0]; // Note: [0] to access the native DOM element
                                    // if (imageInput.files.length > 0) {
                                    //     formData.append('banner_img', imageInput.files[0]);
                                    // }
                                    // console.log(imageInput.files[0]);
                                    if (imageInput.files[0] && blankImg) {
                                        console.log('if updatepost');
                                        // formData.append('banner_img', imageInput.files[0]);
                                        console.log("banner image is changed");
                                        Swal.fire({
                                            title: 'Warning',
                                            text: "Existing banner image will be deleted and the proces cannot be reverted!",
                                            icon: "warning",
                                            showCancelButton: true,
                                            confirmButtonText: 'Yes, proceed',
                                            cancelButtonText: 'Cancel',
                                            // timer: 2000
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                updatePost();
                                            }

                                        })
                                    }
                                    else {
                                        console.log('else updatepost');
                                        await updatePost();
                                    }
                                    // const formData = { p_title, p_slug, meta_title, meta_description, meta_keywords, read_time, author, category, subCategory, banner_img };
                                    // console.log({ formData });

                                }
                            });

                            $('.publishBtn').on('click', async function () {


                                const post_desc = tinymce.get("p_desc").getContent();
                                
                                const pattern = /cts-1|cts-2/;
                                // const post_desc1 = tinymce.get("p_desc").getContent();
                                // Test if the text contains the pattern
                                if (pattern.test(post_desc) || descChangeFlag == 1) {
                                    Swal.fire({
                                        text: 'Post description changes are not accepted. Accept Changes and Save Post and Try again',
                                        icon: "error",
                                    });
                                }else{
                                    console.log('post Update btn clicked');
                                    const updateId = '<%= postData.id %>';
                                    Swal.fire({
                                    icon: "warning",
                                    html : `<span>Publish Post id ${updateId} </span>`,
                                    showCancelButton: true,
                                    confirmButtonColor: "#3085d6",
                                    cancelButtonColor: "#d33",
                                    confirmButtonText: "Yes, Udpate Status!"

                                    }).then(async (result) => {
                                        if (result.isConfirmed) {
                                            console.log('confimed');

                                            try {
                                                const response = await fetch(`<%=rootVar%>/api/post/publish_post/${updateId}`, {
                                                method: 'PUT',
                                                })

                                                if (response.ok) {
                                                Swal.fire({
                                                    text: `Post Status changed to Publish!`,
                                                    icon: "success",

                                                }).then((result) => {
                                                    window.location.replace('<%=rootVar%>/postall');
                                                })
                                                }
                                                else {
                                                const responseData = await response.json();
                                                throw new Error(responseData.message);
                                                }
                                            } catch (error) {
                                                console.log(error);
                                                Swal.fire({
                                                text: error.message,
                                                icon: "error",
                                                });
                                                // console.log(error);
                                            }
                                        } 
                                    })
                                }
                            })


                        })
                    </script>

                    <% } %>
    </body>

    </html>